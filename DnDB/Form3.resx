<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        AAABAAEAICAAAAEAIACoEAAAFgAAACgAAAAgAAAAQAAAAAEAIAAAAAAAABAAABMLAAATCwAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAABMAAAATAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAsAAABaAAAAxwAAAMcAAABaAAAACwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAQAAAA+AAAArwAAAPcAAAD/AAAA/wAAAPcAAACvAAAAPQAAAAQAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAmAAAAkQAAAO4AAAD9AAAA/wAAAOwAAADuAAAA/wAAAPsAAADuAAAAkQAA
        ACYAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAUAAAAcQAAAN0AAAD7AAAAuAAAAL4AAAD+AAAAeAAAAIYAAAD+AAAAqgAA
        ALYAAAD7AAAA3QAAAHAAAAAUAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        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
        AFIAAAAJAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAVAAAAcgAAAN0AAAD7AAAAuAAAAEQAAAASAAAAygAAAMkAAAASAAAARAAAALgAAAD7AAAA3QAA
        AHEAAAAVAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAJgAAAJIAAADvAAAA8QAAAKMAAADdAAAA3QAAAKMAAADxAAAA7wAA
        AJEAAAAmAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABAAAAD4AAACxAAAA+QAAAP8AAAD/AAAA+AAA
        ALEAAAA+AAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAwAAABbAAAAyAAA
        AMcAAABaAAAACwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAATAAAAEwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAA///////+f///+B///+AH///AA///AAD//AAAP/ABiA/gIYQH4MPDB+AD
        wAfgAAAH4gAAR+MAAMfiB8DH4gPAR+AjhEfgIYQH4HAOB+DwDgfg+B8H4AAAB+AAAAfgAAAH8Bw4D/wE
        ID//AAD//8AD///gB///+B////5///////8=
</value>
  </data>
</root>